/* tslint:disable */
/* eslint-disable */
/**
 * Hnefatafl API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ActivePlayer } from './ActivePlayer';
import {
    ActivePlayerFromJSON,
    ActivePlayerFromJSONTyped,
    ActivePlayerToJSON,
} from './ActivePlayer';
import type { Player } from './Player';
import {
    PlayerFromJSON,
    PlayerFromJSONTyped,
    PlayerToJSON,
} from './Player';
import type { PlayerEnum } from './PlayerEnum';
import {
    PlayerEnumFromJSON,
    PlayerEnumFromJSONTyped,
    PlayerEnumToJSON,
} from './PlayerEnum';

/**
 * 
 * @export
 * @interface GamePlayers
 */
export interface GamePlayers {
    /**
     * 
     * @type {PlayerEnum}
     * @memberof GamePlayers
     */
    me?: PlayerEnum;
    /**
     * 
     * @type {ActivePlayer}
     * @memberof GamePlayers
     */
    active: ActivePlayer;
    /**
     * 
     * @type {Player}
     * @memberof GamePlayers
     */
    viking?: Player;
    /**
     * 
     * @type {Player}
     * @memberof GamePlayers
     */
    monster?: Player;
}

/**
 * Check if a given object implements the GamePlayers interface.
 */
export function instanceOfGamePlayers(value: object): boolean {
    if (!('active' in value)) return false;
    return true;
}

export function GamePlayersFromJSON(json: any): GamePlayers {
    return GamePlayersFromJSONTyped(json, false);
}

export function GamePlayersFromJSONTyped(json: any, ignoreDiscriminator: boolean): GamePlayers {
    if (json == null) {
        return json;
    }
    return {
        
        'me': json['me'] == null ? undefined : PlayerEnumFromJSON(json['me']),
        'active': ActivePlayerFromJSON(json['active']),
        'viking': json['viking'] == null ? undefined : PlayerFromJSON(json['viking']),
        'monster': json['monster'] == null ? undefined : PlayerFromJSON(json['monster']),
    };
}

export function GamePlayersToJSON(value?: GamePlayers | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'me': PlayerEnumToJSON(value['me']),
        'active': ActivePlayerToJSON(value['active']),
        'viking': PlayerToJSON(value['viking']),
        'monster': PlayerToJSON(value['monster']),
    };
}

